{
    "type": "bundle",
    "id": "bundle--a17b2101-ed0f-4813-90c0-fe4f191c9c59",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--71d49700-4949-4f2b-a051-39e236f7edb4",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-04-03T00:22:19.608831Z",
            "modified": "2025-04-03T00:22:19.608831Z",
            "name": "CVE-2025-21893",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nkeys: Fix UAF in key_put()\n\nOnce a key's reference count has been reduced to 0, the garbage collector\nthread may destroy it at any time and so key_put() is not allowed to touch\nthe key after that point.  The most key_put() is normally allowed to do is\nto touch key_gc_work as that's a static global variable.\n\nHowever, in an effort to speed up the reclamation of quota, this is now\ndone in key_put() once the key's usage is reduced to 0 - but now the code\nis looking at the key after the deadline, which is forbidden.\n\nFix this by using a flag to indicate that a key can be gc'd now rather than\nlooking at the key's refcount in the garbage collector.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2025-21893"
                }
            ]
        }
    ]
}