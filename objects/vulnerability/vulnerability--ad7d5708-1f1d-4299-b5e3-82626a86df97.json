{
    "type": "bundle",
    "id": "bundle--0acbe9ba-4f47-45ac-a67b-5ae655ce0e76",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--ad7d5708-1f1d-4299-b5e3-82626a86df97",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-05-02T00:23:33.582185Z",
            "modified": "2025-05-02T00:23:33.582185Z",
            "name": "CVE-2022-49812",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbridge: switchdev: Fix memory leaks when changing VLAN protocol\n\nThe bridge driver can offload VLANs to the underlying hardware either\nvia switchdev or the 8021q driver. When the former is used, the VLAN is\nmarked in the bridge driver with the 'BR_VLFLAG_ADDED_BY_SWITCHDEV'\nprivate flag.\n\nTo avoid the memory leaks mentioned in the cited commit, the bridge\ndriver will try to delete a VLAN via the 8021q driver if the VLAN is not\nmarked with the previously mentioned flag.\n\nWhen the VLAN protocol of the bridge changes, switchdev drivers are\nnotified via the 'SWITCHDEV_ATTR_ID_BRIDGE_VLAN_PROTOCOL' attribute, but\nthe 8021q driver is also called to add the existing VLANs with the new\nprotocol and delete them with the old protocol.\n\nIn case the VLANs were offloaded via switchdev, the above behavior is\nboth redundant and buggy. Redundant because the VLANs are already\nprogrammed in hardware and drivers that support VLAN protocol change\n(currently only mlx5) change the protocol upon the switchdev attribute\nnotification. Buggy because the 8021q driver is called despite these\nVLANs being marked with 'BR_VLFLAG_ADDED_BY_SWITCHDEV'. This leads to\nmemory leaks [1] when the VLANs are deleted.\n\nFix by not calling the 8021q driver for VLANs that were already\nprogrammed via switchdev.\n\n[1]\nunreferenced object 0xffff8881f6771200 (size 256):\n  comm \"ip\", pid 446855, jiffies 4298238841 (age 55.240s)\n  hex dump (first 32 bytes):\n    00 00 7f 0e 83 88 ff ff 00 00 00 00 00 00 00 00  ................\n    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  backtrace:\n    [<00000000012819ac>] vlan_vid_add+0x437/0x750\n    [<00000000f2281fad>] __br_vlan_set_proto+0x289/0x920\n    [<000000000632b56f>] br_changelink+0x3d6/0x13f0\n    [<0000000089d25f04>] __rtnl_newlink+0x8ae/0x14c0\n    [<00000000f6276baf>] rtnl_newlink+0x5f/0x90\n    [<00000000746dc902>] rtnetlink_rcv_msg+0x336/0xa00\n    [<000000001c2241c0>] netlink_rcv_skb+0x11d/0x340\n    [<0000000010588814>] netlink_unicast+0x438/0x710\n    [<00000000e1a4cd5c>] netlink_sendmsg+0x788/0xc40\n    [<00000000e8992d4e>] sock_sendmsg+0xb0/0xe0\n    [<00000000621b8f91>] ____sys_sendmsg+0x4ff/0x6d0\n    [<000000000ea26996>] ___sys_sendmsg+0x12e/0x1b0\n    [<00000000684f7e25>] __sys_sendmsg+0xab/0x130\n    [<000000004538b104>] do_syscall_64+0x3d/0x90\n    [<0000000091ed9678>] entry_SYSCALL_64_after_hwframe+0x46/0xb0",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2022-49812"
                }
            ]
        }
    ]
}