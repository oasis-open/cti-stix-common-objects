{
    "type": "bundle",
    "id": "bundle--87d5e41f-ddcd-4ac6-af81-b43996c0d1fb",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--b576f3c5-1096-4aa7-8121-3693bd24769e",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-02-27T00:21:47.276573Z",
            "modified": "2025-02-27T00:21:47.276573Z",
            "name": "CVE-2022-49402",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nftrace: Clean up hash direct_functions on register failures\n\nWe see the following GPF when register_ftrace_direct fails:\n\n[ ] general protection fault, probably for non-canonical address \\\n  0x200000000000010: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI\n[...]\n[ ] RIP: 0010:ftrace_find_rec_direct+0x53/0x70\n[ ] Code: 48 c1 e0 03 48 03 42 08 48 8b 10 31 c0 48 85 d2 74 [...]\n[ ] RSP: 0018:ffffc9000138bc10 EFLAGS: 00010206\n[ ] RAX: 0000000000000000 RBX: ffffffff813e0df0 RCX: 000000000000003b\n[ ] RDX: 0200000000000000 RSI: 000000000000000c RDI: ffffffff813e0df0\n[ ] RBP: ffffffffa00a3000 R08: ffffffff81180ce0 R09: 0000000000000001\n[ ] R10: ffffc9000138bc18 R11: 0000000000000001 R12: ffffffff813e0df0\n[ ] R13: ffffffff813e0df0 R14: ffff888171b56400 R15: 0000000000000000\n[ ] FS:  00007fa9420c7780(0000) GS:ffff888ff6a00000(0000) knlGS:000000000\n[ ] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[ ] CR2: 000000000770d000 CR3: 0000000107d50003 CR4: 0000000000370ee0\n[ ] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[ ] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[ ] Call Trace:\n[ ]  <TASK>\n[ ]  register_ftrace_direct+0x54/0x290\n[ ]  ? render_sigset_t+0xa0/0xa0\n[ ]  bpf_trampoline_update+0x3f5/0x4a0\n[ ]  ? 0xffffffffa00a3000\n[ ]  bpf_trampoline_link_prog+0xa9/0x140\n[ ]  bpf_tracing_prog_attach+0x1dc/0x450\n[ ]  bpf_raw_tracepoint_open+0x9a/0x1e0\n[ ]  ? find_held_lock+0x2d/0x90\n[ ]  ? lock_release+0x150/0x430\n[ ]  __sys_bpf+0xbd6/0x2700\n[ ]  ? lock_is_held_type+0xd8/0x130\n[ ]  __x64_sys_bpf+0x1c/0x20\n[ ]  do_syscall_64+0x3a/0x80\n[ ]  entry_SYSCALL_64_after_hwframe+0x44/0xae\n[ ] RIP: 0033:0x7fa9421defa9\n[ ] Code: 00 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 9 f8 [...]\n[ ] RSP: 002b:00007ffed743bd78 EFLAGS: 00000246 ORIG_RAX: 0000000000000141\n[ ] RAX: ffffffffffffffda RBX: 00000000069d2480 RCX: 00007fa9421defa9\n[ ] RDX: 0000000000000078 RSI: 00007ffed743bd80 RDI: 0000000000000011\n[ ] RBP: 00007ffed743be00 R08: 0000000000bb7270 R09: 0000000000000000\n[ ] R10: 00000000069da210 R11: 0000000000000246 R12: 0000000000000001\n[ ] R13: 00007ffed743c4b0 R14: 00000000069d2480 R15: 0000000000000001\n[ ]  </TASK>\n[ ] Modules linked in: klp_vm(OK)\n[ ] ---[ end trace 0000000000000000 ]---\n\nOne way to trigger this is:\n  1. load a livepatch that patches kernel function xxx;\n  2. run bpftrace -e 'kfunc:xxx {}', this will fail (expected for now);\n  3. repeat #2 => gpf.\n\nThis is because the entry is added to direct_functions, but not removed.\nFix this by remove the entry from direct_functions when\nregister_ftrace_direct fails.\n\nAlso remove the last trailing space from ftrace.c, so we don't have to\nworry about it anymore.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2022-49402"
                }
            ]
        }
    ]
}