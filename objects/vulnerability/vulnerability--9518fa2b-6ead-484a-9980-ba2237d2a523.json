{
    "type": "bundle",
    "id": "bundle--9e887615-a9bb-47ec-bf98-b33f24ee4346",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--9518fa2b-6ead-484a-9980-ba2237d2a523",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-01-22T00:20:53.413471Z",
            "modified": "2025-01-22T00:20:53.413471Z",
            "name": "CVE-2024-57937",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm: reinstate ability to map write-sealed memfd mappings read-only\n\nPatch series \"mm: reinstate ability to map write-sealed memfd mappings\nread-only\".\n\nIn commit 158978945f31 (\"mm: perform the mapping_map_writable() check\nafter call_mmap()\") (and preceding changes in the same series) it became\npossible to mmap() F_SEAL_WRITE sealed memfd mappings read-only.\n\nCommit 5de195060b2e (\"mm: resolve faulty mmap_region() error path\nbehaviour\") unintentionally undid this logic by moving the\nmapping_map_writable() check before the shmem_mmap() hook is invoked,\nthereby regressing this change.\n\nThis series reworks how we both permit write-sealed mappings being mapped\nread-only and disallow mprotect() from undoing the write-seal, fixing this\nregression.\n\nWe also add a regression test to ensure that we do not accidentally\nregress this in future.\n\nThanks to Julian Orth for reporting this regression.\n\n\nThis patch (of 2):\n\nIn commit 158978945f31 (\"mm: perform the mapping_map_writable() check\nafter call_mmap()\") (and preceding changes in the same series) it became\npossible to mmap() F_SEAL_WRITE sealed memfd mappings read-only.\n\nThis was previously unnecessarily disallowed, despite the man page\ndocumentation indicating that it would be, thereby limiting the usefulness\nof F_SEAL_WRITE logic.\n\nWe fixed this by adapting logic that existed for the F_SEAL_FUTURE_WRITE\nseal (one which disallows future writes to the memfd) to also be used for\nF_SEAL_WRITE.\n\nFor background - the F_SEAL_FUTURE_WRITE seal clears VM_MAYWRITE for a\nread-only mapping to disallow mprotect() from overriding the seal - an\noperation performed by seal_check_write(), invoked from shmem_mmap(), the\nf_op->mmap() hook used by shmem mappings.\n\nBy extending this to F_SEAL_WRITE and critically - checking\nmapping_map_writable() to determine if we may map the memfd AFTER we\ninvoke shmem_mmap() - the desired logic becomes possible.  This is because\nmapping_map_writable() explicitly checks for VM_MAYWRITE, which we will\nhave cleared.\n\nCommit 5de195060b2e (\"mm: resolve faulty mmap_region() error path\nbehaviour\") unintentionally undid this logic by moving the\nmapping_map_writable() check before the shmem_mmap() hook is invoked,\nthereby regressing this change.\n\nWe reinstate this functionality by moving the check out of shmem_mmap()\nand instead performing it in do_mmap() at the point at which VMA flags are\nbeing determined, which seems in any case to be a more appropriate place\nin which to make this determination.\n\nIn order to achieve this we rework memfd seal logic to allow us access to\nthis information using existing logic and eliminate the clearing of\nVM_MAYWRITE from seal_check_write() which we are performing in do_mmap()\ninstead.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-57937"
                }
            ]
        }
    ]
}