{
    "type": "bundle",
    "id": "bundle--a6833abb-3e01-4a05-b7f0-9c86b2f41a8c",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--d33753d6-bc62-4747-8531-95c00a5cea43",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-10-22T00:20:56.415528Z",
            "modified": "2024-10-22T00:20:56.415528Z",
            "name": "CVE-2024-49870",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ncachefiles: fix dentry leak in cachefiles_open_file()\n\nA dentry leak may be caused when a lookup cookie and a cull are concurrent:\n\n            P1             |             P2\n-----------------------------------------------------------\ncachefiles_lookup_cookie\n  cachefiles_look_up_object\n    lookup_one_positive_unlocked\n     // get dentry\n                            cachefiles_cull\n                              inode->i_flags |= S_KERNEL_FILE;\n    cachefiles_open_file\n      cachefiles_mark_inode_in_use\n        __cachefiles_mark_inode_in_use\n          can_use = false\n          if (!(inode->i_flags & S_KERNEL_FILE))\n            can_use = true\n\t  return false\n        return false\n        // Returns an error but doesn't put dentry\n\nAfter that the following WARNING will be triggered when the backend folder\nis umounted:\n\n==================================================================\nBUG: Dentry 000000008ad87947{i=7a,n=Dx_1_1.img}  still in use (1) [unmount of ext4 sda]\nWARNING: CPU: 4 PID: 359261 at fs/dcache.c:1767 umount_check+0x5d/0x70\nCPU: 4 PID: 359261 Comm: umount Not tainted 6.6.0-dirty #25\nRIP: 0010:umount_check+0x5d/0x70\nCall Trace:\n <TASK>\n d_walk+0xda/0x2b0\n do_one_tree+0x20/0x40\n shrink_dcache_for_umount+0x2c/0x90\n generic_shutdown_super+0x20/0x160\n kill_block_super+0x1a/0x40\n ext4_kill_sb+0x22/0x40\n deactivate_locked_super+0x35/0x80\n cleanup_mnt+0x104/0x160\n==================================================================\n\nWhether cachefiles_open_file() returns true or false, the reference count\nobtained by lookup_positive_unlocked() in cachefiles_look_up_object()\nshould be released.\n\nTherefore release that reference count in cachefiles_look_up_object() to\nfix the above issue and simplify the code.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-49870"
                }
            ]
        }
    ]
}