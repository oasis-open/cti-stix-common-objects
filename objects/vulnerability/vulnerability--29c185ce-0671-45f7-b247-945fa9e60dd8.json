{
    "type": "bundle",
    "id": "bundle--063833c8-1df6-408a-b53f-3be008b72d29",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--29c185ce-0671-45f7-b247-945fa9e60dd8",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-01-22T00:20:53.430036Z",
            "modified": "2025-01-22T00:20:53.430036Z",
            "name": "CVE-2024-57930",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ntracing: Have process_string() also allow arrays\n\nIn order to catch a common bug where a TRACE_EVENT() TP_fast_assign()\nassigns an address of an allocated string to the ring buffer and then\nreferences it in TP_printk(), which can be executed hours later when the\nstring is free, the function test_event_printk() runs on all events as\nthey are registered to make sure there's no unwanted dereferencing.\n\nIt calls process_string() to handle cases in TP_printk() format that has\n\"%s\". It returns whether or not the string is safe. But it can have some\nfalse positives.\n\nFor instance, xe_bo_move() has:\n\n TP_printk(\"move_lacks_source:%s, migrate object %p [size %zu] from %s to %s device_id:%s\",\n            __entry->move_lacks_source ? \"yes\" : \"no\", __entry->bo, __entry->size,\n            xe_mem_type_to_name[__entry->old_placement],\n            xe_mem_type_to_name[__entry->new_placement], __get_str(device_id))\n\nWhere the \"%s\" references into xe_mem_type_to_name[]. This is an array of\npointers that should be safe for the event to access. Instead of flagging\nthis as a bad reference, if a reference points to an array, where the\nrecord field is the index, consider it safe.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-57930"
                }
            ]
        }
    ]
}