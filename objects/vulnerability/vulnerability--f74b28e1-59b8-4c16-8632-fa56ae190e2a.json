{
    "type": "bundle",
    "id": "bundle--4e0d6a5a-33fc-4739-a619-f8a5cdbf579c",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--f74b28e1-59b8-4c16-8632-fa56ae190e2a",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-05-03T00:23:02.550863Z",
            "modified": "2025-05-03T00:23:02.550863Z",
            "name": "CVE-2023-53095",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/ttm: Fix a NULL pointer dereference\n\nThe LRU mechanism may look up a resource in the process of being removed\nfrom an object. The locking rules here are a bit unclear but it looks\ncurrently like res->bo assignment is protected by the LRU lock, whereas\nbo->resource is protected by the object lock, while *clearing* of\nbo->resource is also protected by the LRU lock. This means that if\nwe check that bo->resource points to the LRU resource under the LRU\nlock we should be safe.\nSo perform that check before deciding to swap out a bo. That avoids\ndereferencing a NULL bo->resource in ttm_bo_swapout().",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2023-53095"
                }
            ]
        }
    ]
}