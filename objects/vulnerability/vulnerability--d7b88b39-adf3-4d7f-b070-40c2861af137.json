{
    "type": "bundle",
    "id": "bundle--0bc605c0-0b24-4d4d-af23-7cd4a14669b3",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--d7b88b39-adf3-4d7f-b070-40c2861af137",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-02-27T00:21:47.729564Z",
            "modified": "2025-02-27T00:21:47.729564Z",
            "name": "CVE-2022-49551",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nusb: isp1760: Fix out-of-bounds array access\n\nRunning the driver through kasan gives an interesting splat:\n\n  BUG: KASAN: global-out-of-bounds in isp1760_register+0x180/0x70c\n  Read of size 20 at addr f1db2e64 by task swapper/0/1\n  (...)\n  isp1760_register from isp1760_plat_probe+0x1d8/0x220\n  (...)\n\nThis happens because the loop reading the regmap fields for the\ndifferent ISP1760 variants look like this:\n\n  for (i = 0; i < HC_FIELD_MAX; i++) { ... }\n\nMeaning it expects the arrays to be at least HC_FIELD_MAX - 1 long.\n\nHowever the arrays isp1760_hc_reg_fields[], isp1763_hc_reg_fields[],\nisp1763_hc_volatile_ranges[] and isp1763_dc_volatile_ranges[] are\ndynamically sized during compilation.\n\nFix this by putting an empty assignment to the [HC_FIELD_MAX]\nand [DC_FIELD_MAX] array member at the end of each array.\nThis will make the array one member longer than it needs to be,\nbut avoids the risk of overwriting whatever is inside\n[HC_FIELD_MAX - 1] and is simple and intuitive to read. Also\nadd comments explaining what is going on.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2022-49551"
                }
            ]
        }
    ]
}