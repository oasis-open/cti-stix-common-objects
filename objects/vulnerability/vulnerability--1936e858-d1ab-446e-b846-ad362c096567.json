{
    "type": "bundle",
    "id": "bundle--125c731f-6415-4341-bee8-498cd9e52a30",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--1936e858-d1ab-446e-b846-ad362c096567",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-02-27T00:21:47.23877Z",
            "modified": "2025-02-27T00:21:47.23877Z",
            "name": "CVE-2022-49450",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nrxrpc: Fix listen() setting the bar too high for the prealloc rings\n\nAF_RXRPC's listen() handler lets you set the backlog up to 32 (if you bump\nup the sysctl), but whilst the preallocation circular buffers have 32 slots\nin them, one of them has to be a dead slot because we're using CIRC_CNT().\n\nThis means that listen(rxrpc_sock, 32) will cause an oops when the socket\nis closed because rxrpc_service_prealloc_one() allocated one too many calls\nand rxrpc_discard_prealloc() won't then be able to get rid of them because\nit'll think the ring is empty.  rxrpc_release_calls_on_socket() then tries\nto abort them, but oopses because call->peer isn't yet set.\n\nFix this by setting the maximum backlog to RXRPC_BACKLOG_MAX - 1 to match\nthe ring capacity.\n\n BUG: kernel NULL pointer dereference, address: 0000000000000086\n ...\n RIP: 0010:rxrpc_send_abort_packet+0x73/0x240 [rxrpc]\n Call Trace:\n  <TASK>\n  ? __wake_up_common_lock+0x7a/0x90\n  ? rxrpc_notify_socket+0x8e/0x140 [rxrpc]\n  ? rxrpc_abort_call+0x4c/0x60 [rxrpc]\n  rxrpc_release_calls_on_socket+0x107/0x1a0 [rxrpc]\n  rxrpc_release+0xc9/0x1c0 [rxrpc]\n  __sock_release+0x37/0xa0\n  sock_close+0x11/0x20\n  __fput+0x89/0x240\n  task_work_run+0x59/0x90\n  do_exit+0x319/0xaa0",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2022-49450"
                }
            ]
        }
    ]
}