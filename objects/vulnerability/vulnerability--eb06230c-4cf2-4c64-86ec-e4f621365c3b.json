{
    "type": "bundle",
    "id": "bundle--4dc1a732-c8c9-43fd-864a-eed764c4fcae",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--eb06230c-4cf2-4c64-86ec-e4f621365c3b",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-05-21T00:24:23.039527Z",
            "modified": "2025-05-21T00:24:23.039527Z",
            "name": "CVE-2025-37907",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\naccel/ivpu: Fix locking order in ivpu_job_submit\n\nFix deadlock in job submission and abort handling.\nWhen a thread aborts currently executing jobs due to a fault,\nit first locks the global lock protecting submitted_jobs (#1).\n\nAfter the last job is destroyed, it proceeds to release the related context\nand locks file_priv (#2). Meanwhile, in the job submission thread,\nthe file_priv lock (#2) is taken first, and then the submitted_jobs\nlock (#1) is obtained when a job is added to the submitted jobs list.\n\n       CPU0                            CPU1\n       ----                    \t       ----\n  (for example due to a fault)         (jobs submissions keep coming)\n\n  lock(&vdev->submitted_jobs_lock) #1\n  ivpu_jobs_abort_all()\n  job_destroy()\n                                      lock(&file_priv->lock)           #2\n                                      lock(&vdev->submitted_jobs_lock) #1\n  file_priv_release()\n  lock(&vdev->context_list_lock)\n  lock(&file_priv->lock)           #2\n\nThis order of locking causes a deadlock. To resolve this issue,\nchange the order of locking in ivpu_job_submit().",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2025-37907"
                }
            ]
        }
    ]
}