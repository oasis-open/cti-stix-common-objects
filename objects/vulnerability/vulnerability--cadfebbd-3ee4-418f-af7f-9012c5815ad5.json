{
    "type": "bundle",
    "id": "bundle--2305e264-3a83-451d-b6f7-66a57fc0d269",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--cadfebbd-3ee4-418f-af7f-9012c5815ad5",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-07-30T00:18:44.861333Z",
            "modified": "2024-07-30T00:18:44.861333Z",
            "name": "CVE-2024-41032",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm: vmalloc: check if a hash-index is in cpu_possible_mask\n\nThe problem is that there are systems where cpu_possible_mask has gaps\nbetween set CPUs, for example SPARC.  In this scenario addr_to_vb_xa()\nhash function can return an index which accesses to not-possible and not\nsetup CPU area using per_cpu() macro.  This results in an oops on SPARC.\n\nA per-cpu vmap_block_queue is also used as hash table, incorrectly\nassuming the cpu_possible_mask has no gaps.  Fix it by adjusting an index\nto a next possible CPU.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-41032"
                }
            ]
        }
    ]
}